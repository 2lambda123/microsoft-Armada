include "SharedStructs.arm"

level J using SharedStructs {
    noaddr var x:uint32 := 0;
    ghost var mutex:uint64 := 0;
    ghost var acquire_map: map<uint64, OptionalThread> := map[];

    method {:extern} print_uint32(i:uint32)

    method {:extern} Mutex_Init() returns (m: uint64)
    {
        atomic {
            somehow modifies m
                ensures (m !in acquire_map) && (m != 0);
            acquire_map := acquire_map[m := OptionalNone()];
            //acquire_map[m] := OptionalNone();
        }
    }

    // decl acquire lock
    method {:extern} Acquire(m: uint64)
    {
        assume acquire_map[m].OptionalNone?;
        acquire_map[m] := OptionalSome($me);
    }

    // decl release lock
    method {:extern} Release(m: uint64)
    {
        atomic {
            assume $sb_empty;
            assert acquire_map[m] == OptionalSome($me);
            acquire_map[m] := OptionalNone();
        }
    }
 
    method inc(m: uint64)
    {
        Acquire(m);
        
        atomic {
            x ::= x + 1;
        }

        Release(m);
    }

    method main()
    {
        noaddr var tid1:uint64 := 0;
        noaddr var tid2:uint64 := 0;
        noaddr var m:uint64 := 0;
        
        m := Mutex_Init();

        mutex := m;

        atomic {
            tid1 := create_thread inc(m);
        }

        atomic {
            tid2 := create_thread inc(m);
        }

        join tid1;
        join tid2;
        
        print_uint32(2);
    }
}
