include "SharedStructs.arm"

level E using SharedStructs {
    noaddr var x:uint32 := 0;
    ghost var mutex:uint64 := 0;
    ghost var acquire_map: map<uint64, OptionalThread> := map[];
    ghost var inc1:uint64 := 0;
    ghost var inc2:uint64 := 0;
    ghost var done: set<uint64> := {};
    ghost var main_reading: uint8 := 0;

    method {:extern} print_uint32(i:uint32)

    method {:extern} Mutex_Init() returns (m: uint64)
    {
        atomic {
            somehow modifies m
                ensures (m !in acquire_map) && (m != 0);
            acquire_map := acquire_map[m := OptionalNone()];
            //acquire_map[m] := OptionalNone();
        }
    }

    // decl acquire lock
    method {:extern} Acquire(m: uint64)
    {
        assume acquire_map[m].OptionalNone?;
        acquire_map[m] := OptionalSome($me);
    }

    // decl release lock
    method {:extern} Release(m: uint64)
    {
        atomic {
            assume $sb_empty;
            assert acquire_map[m] == OptionalSome($me);
            acquire_map[m] := OptionalNone();
        }
    }
 
    method inc(m: uint64)
        requires m == mutex
        requires m != 0 && m in acquire_map
    {
        noaddr var y: uint32;
        assume m == mutex;
        Acquire(m);
        
        assume acquire_map[mutex] == OptionalSome($me);
        atomic {
            y := x + 1;
            x ::= y;
            done := done + {$me};
        }

        assume acquire_map[mutex] == OptionalSome($me);
        assume m == mutex;
        Release(m);
    }

    method main()
        requires mutex == 0
        requires inc1 == 0
        requires inc2 == 0
    {
        noaddr var tid1:uint64 := 0;
        noaddr var tid2:uint64 := 0;
        noaddr var m:uint64 := 0;
        
        m := Mutex_Init();

        mutex := m;

        atomic {
            tid1 := create_thread inc(m);
            inc1 ::= tid1;
        }

        atomic {
            tid2 := create_thread inc(m);
            inc2 := tid2;
        }

        join tid1;
        join tid2;

        main_reading := 1;
        
        print_uint32(x);
    }
}
