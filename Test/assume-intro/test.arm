include "../../Armada/ArmadaCommonDefinitions.dfy"

structs SharedStructs {

}

level A using SharedStructs {
    noaddr var x:int32;
    noaddr var y:int32;
    noaddr var z:int32 := 0;
    noaddr var p:ptr<int32>;

    method {:extern} DoubleX()
        reads x
        modifies x
        ensures x == old(x) * 2

    method Test()
    {
        noaddr var i:int32;

        i ::= 1;
        x ::= 0;
        label loop:
        while i < 10
        {
            x ::= i;
            i ::= i + 1;
        }
    }

    method main()
    {
        x ::= 3;
        y ::= 4;
label before_z:
        goto after_z;
        z ::= 5;
label after_z:
        x ::= 6;
        Test();
    }

    invariant Inv1
    {
        z > 0 ==> y == 4
    }

    yield_predicate YP1
    {
        x >= old(x)
    }
}

level B using SharedStructs {
    noaddr var x:int32;
    noaddr var y:int32;
    noaddr var z:int32 := 0;
    noaddr var p:ptr<int32>;

    method {:extern} DoubleX()
        reads x
        modifies x
        ensures x == old(x) * 2

    method Test()
        requires x > 2
        ensures  x == 9
        ensures  y == old(y)
        ensures  z == old(z)
    {
        noaddr var i:int32;

        i ::= 1;
        x ::= 0;
        label loop:
        while i < 10
            invariant 1 <= i
            invariant i <= 10
            invariant x == i - 1
            ensures   y == old(y)
            ensures   z == old(z)
        {
            x ::= i;
            i ::= i + 1;
        }
    }

    method main()
        ensures y == 4
        modifies x, y, z
    {
        x ::= 3;
        y ::= 4;
label before_z:
        goto after_z;
        z ::= 5;
label after_z:
        assume x == 3 && y == 4;
        x ::= 6;
        Test();
    }

    universal_step_constraint ZPositiveImpliesYFour
    {
        z > 0 ==> y == 4
    }
}

proof AB {
    refinement A B
    assume_intro

    chl_invariant MyGlobalInvariant @"
      && (forall tid :: tid in threads ==> tid == tid_init)
      && (forall tid :: tid in threads ==> threads[tid].storeBuffer == [])
    "

    chl_invariant Inv1
    chl_local_invariant main_before_z XIs3 "globals.x == 3"
    chl_yield_pred {:excludeAll} YP1

    chl_yield_pred {:excludeAll} MyYieldPredicate @"
      && globals'.x == globals.x
      && globals'.y == globals.y
      && globals'.z == globals.z
    "
}
