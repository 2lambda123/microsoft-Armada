include "../../Armada/ArmadaCommonDefinitions.dfy"

structs SharedStructs
{
  ghost var log:seq<uint32> := [];

  refinement_constraint @"
     || (ls.stop_reason == hs.stop_reason && ls.ghosts.log == hs.ghosts.log)
     || (ls.stop_reason.Armada_NotStopped? && ls.ghosts.log <= hs.ghosts.log)
  "
}

level {:concrete} Impl using SharedStructs
{
  noaddr var barrier:uint32[10];

  method {:extern} fence()
  {
    somehow awaits $sb_empty;
  }

  method {:extern} print_uint32(i:uint32)
  {
    log := log + [i];
  }

  method worker(id:uint32)
  {
    noaddr var waiting_for_barrier:int8 := 1;
    noaddr var i:uint32;
     
    print_uint32(id);

    barrier[id] := 1;
    while waiting_for_barrier != 0
    {
      waiting_for_barrier := 0;
      i := 0;
      while i < 10
      {
        if barrier[i] == 0
        {
          waiting_for_barrier := 1;
        }
        i := i + 1;
      }
    }

    print_uint32(id + 100);
  }

  method main()
  {
    noaddr var i:uint32;
    noaddr var tids:uint64[10];

    i := 0;
    while i < 10
    {
      barrier[i] := 0;
      i := i + 1;
    }

    fence();

    i := 0;
    while i < 10
    {
      tids[i] := create_thread worker(i);
      i := i + 1;
    }

    i := 0;
    while i < 10
    {
      join tids[i];
      i := i + 1;
    }
  }

}

level L1 using SharedStructs
{
  noaddr var barrier:uint32[10];
  ghost var barrier_initialized:seq<bool> := [false, false, false, false, false, false, false, false, false, false];
  ghost var all_initialized:bool := false;
  ghost var threads_past_barrier:seq<bool> := [];

  method {:extern} fence()
  {
    somehow awaits $sb_empty;
  }

  method {:extern} print_uint32(i:uint32)
  {
    log := log + [i];
  }

  method worker(id:uint32)
  {
    noaddr var waiting_for_barrier:int8 := 1;
    noaddr var i:uint32;
     
    print_uint32(id);

    threads_past_barrier := if 0 <= id as int < |threads_past_barrier| then threads_past_barrier[id as int := true] else threads_past_barrier;
    barrier[id] := 1;
    while waiting_for_barrier != 0
    {
      waiting_for_barrier := 0;
      i := 0;
      while i < 10
      {
        if barrier[i] == 0
        {
          waiting_for_barrier := 1;
        }
        i := i + 1;
      }
    }

    print_uint32(id + 100);
  }

  method main()
  {
    noaddr var i:uint32;
    noaddr var tids:uint64[10];

    i := 0;
    while i < 10
    {
      atomic {
        barrier[i] := 0;
        barrier_initialized := if 0 <= i as int < |barrier_initialized| then barrier_initialized[i as int := true] else barrier_initialized;
      }
      i := i + 1;
    }

    fence();

  label post_fence:
    threads_past_barrier := [false, false, false, false, false, false, false, false, false, false];
    all_initialized := true;

    i := 0;
    while i < 10
    {
      tids[i] := create_thread worker(i);
      i := i + 1;
    }

    i := 0;
    while i < 10
    {
      join tids[i];
      i := i + 1;
    }
  }
}
    
proof ImplRefinesL1
{
  refinement Impl L1
  var_intro barrier_initialized, all_initialized, threads_past_barrier
}

level L2 using SharedStructs
{
  noaddr var barrier:uint32[10];
  ghost var barrier_initialized:seq<bool> := [false, false, false, false, false, false, false, false, false, false];
  ghost var all_initialized:bool := false;
  ghost var threads_past_barrier:seq<bool> := [];

  method {:extern} fence()
    ensures old(all_initialized) == all_initialized
    ensures old(|barrier_initialized|) == |barrier_initialized|
    ensures forall j :: 0 <= j < old(|barrier_initialized|) && old(barrier_initialized)[j] ==> j < |barrier_initialized| && barrier_initialized[j]
    ensures |old(threads_past_barrier)| == 10 ==> |threads_past_barrier| == 10
    ensures old(all_initialized) ==> (forall j :: 0 <= j < old(|threads_past_barrier|) && old(threads_past_barrier)[j] ==> j < |threads_past_barrier| && threads_past_barrier[j])
    ensures $sb_empty
  {
    somehow awaits $sb_empty;
  }

  method {:extern} print_uint32(i:uint32)
    ensures old(all_initialized) == all_initialized
    ensures old(|barrier_initialized|) == |barrier_initialized|
    ensures |old(threads_past_barrier)| == 10 ==> |threads_past_barrier| == 10
    ensures forall j :: 0 <= j < old(|barrier_initialized|) && old(barrier_initialized)[j] ==> j < |barrier_initialized| && barrier_initialized[j]
    ensures |old(threads_past_barrier)| == 10 ==> |threads_past_barrier| == 10
    ensures old(all_initialized) ==> (forall j :: 0 <= j < old(|threads_past_barrier|) && old(threads_past_barrier)[j] ==> j < |threads_past_barrier| && threads_past_barrier[j])
  {
    log := log + [i];
  }

  method worker(id:uint32)
    requires all_initialized
    requires |threads_past_barrier| == 10
    requires 0 <= id < 10
  {
    noaddr var waiting_for_barrier:int8 := 1;
    noaddr var i:uint32;
     
    print_uint32(id);

    assume 0 <= id as int < |threads_past_barrier|;
    threads_past_barrier := if 0 <= id as int < |threads_past_barrier| then threads_past_barrier[id as int := true] else threads_past_barrier;
    barrier[id] := 1;
    while waiting_for_barrier != 0
      invariant all_initialized
      invariant |threads_past_barrier| == 10
      invariant waiting_for_barrier == 0 ==> forall j :: 0 <= j < |threads_past_barrier| ==> threads_past_barrier[j]
    {
      waiting_for_barrier := 0;
      i := 0;
      while i < 10
        invariant 0 <= i <= 10
        invariant all_initialized
        invariant |threads_past_barrier| == 10
        invariant waiting_for_barrier == 0 ==> forall j :: 0 <= j < i as int && j < |threads_past_barrier| ==> threads_past_barrier[j]
      {
        if barrier[i] == 0
        {
          waiting_for_barrier := 1;
        }
        i := i + 1;
      }
    }

    assume |threads_past_barrier| == 10 && forall j :: 0 <= j < 10 ==> threads_past_barrier[j];
    print_uint32(id + 100);
  }

  method main()
    requires !all_initialized
  {
    noaddr var i:uint32;
    noaddr var tids:uint64[10];

    i := 0;
    while i < 10
      invariant 0 <= i <= 10
      invariant |barrier_initialized| == 10 && forall j :: 0 <= j < i as int && j < |barrier_initialized| ==> barrier_initialized[j]
      invariant !all_initialized
    {
      atomic {
        barrier[i] := 0;
        barrier_initialized := if 0 <= i as int < |barrier_initialized| then barrier_initialized[i as int := true] else barrier_initialized;
      }
      i := i + 1;
    }

    fence();

  label post_fence:
    threads_past_barrier := [false, false, false, false, false, false, false, false, false, false];
    all_initialized := true;

    i := 0;
    while i < 10
      invariant $sb_empty
      invariant 0 <= i <= 10
      invariant all_initialized
      invariant |barrier_initialized| == 10
      invariant forall j :: 0 <= j < |barrier_initialized| ==> barrier_initialized[j]
      invariant |threads_past_barrier| == 10
    {
      tids[i] := create_thread worker(i);
      i := i + 1;
    }

    i := 0;
    while i < 10
      invariant 0 <= i <= 10
    {
      join tids[i];
      i := i + 1;
    }
  }
}

proof L1RefinesL2
{
  refinement L1 L2
  assume_intro

  include_file "extra.dfy"
  import_module L1RefinesL2Helpers
  extra lemma_LoopModifiesClausesOnJumpBackPathLemma_worker_TTF_6
        "L1RefinesL2Helpers.lemma_BarrierNonzeroInLocalViewImpliesStoreBuffer1OrBarrier1(ss8.state.s);"

  inductive_invariant BarrierSize10 "|s.s.ghosts.barrier_initialized| == 10 && |s.s.mem.globals.barrier| == 10"

  chl_yield_pred BarrierYieldPred @"
    && (forall j :: 0 <= j < |s.s.ghosts.barrier_initialized| && s.s.ghosts.barrier_initialized[j]
               ==> j < |s'.s.ghosts.barrier_initialized| && s'.s.ghosts.barrier_initialized[j])
    && (s.s.ghosts.all_initialized ==> s'.s.ghosts.all_initialized &&
          (forall j :: 0 <= j < |s.s.ghosts.threads_past_barrier| && s.s.ghosts.threads_past_barrier[j]
                  ==> j < |s'.s.ghosts.threads_past_barrier| && s'.s.ghosts.threads_past_barrier[j]))
    && (|s.s.ghosts.threads_past_barrier| == 10 ==> |s'.s.ghosts.threads_past_barrier| == 10)
    && (tid in s.s.threads ==> tid in s'.s.threads && |s'.s.threads[tid].storeBuffer| <= |s.s.threads[tid].storeBuffer|)
    && (!s.s.ghosts.all_initialized ==> s'.s.ghosts == s.s.ghosts)
  "

  chl_invariant InitializationInvariant @"
    if s.s.ghosts.all_initialized then
      && |s.s.ghosts.threads_past_barrier| == 10
      && |s.s.ghosts.barrier_initialized| == 10
      && (forall j :: 0 <= j < 10 ==> s.s.ghosts.barrier_initialized[j])
    else
      (forall tid :: tid in s.s.threads ==> tid == s.config.tid_init)
  "
  chl_invariant WaitingForBarrierStoreBufferAlways0Or1 @"
    forall tid, entry :: && tid in s.s.threads
                    && entry in s.s.threads[tid].storeBuffer
                    && entry.loc.Armada_StoreBufferLocation_Unaddressable?
                    && entry.loc.v.Armada_GlobalStaticVar_barrier?
                    && |entry.loc.fields| == 1
                    && entry.loc.fields[0].Armada_FieldArrayIndex?
                    && entry.value.Armada_PrimitiveValue_uint32?
                    ==> entry.value.n_uint32 == 0 || entry.value.n_uint32 == 1"
  chl_invariant NotAllInitializedImpliesOnly0InStoreBuffer @"
    !s.s.ghosts.all_initialized ==>
    (forall entry :: && s.config.tid_init in s.s.threads
                && entry in s.s.threads[s.config.tid_init].storeBuffer
                && entry.loc.Armada_StoreBufferLocation_Unaddressable?
                && entry.loc.v.Armada_GlobalStaticVar_barrier?
                ==>
                (&& |entry.loc.fields| == 1
                 && entry.loc.fields[0].Armada_FieldArrayIndex?
                 && entry.value.Armada_PrimitiveValue_uint32?
                 && entry.value.n_uint32 == 0))"
  chl_invariant BarrierInitializedAndNotAllInitializedImplies0Pending @"
    && !s.s.ghosts.all_initialized
    && |s.s.ghosts.barrier_initialized| == 10
    && |s.s.mem.globals.barrier| == 10
    ==>
    (forall j :: && 0 <= j < 10
            && s.s.ghosts.barrier_initialized[j]
            && s.s.mem.globals.barrier[j] != 0
            ==> && s.config.tid_init in s.s.threads
                && (exists entry ::
                      && entry in s.s.threads[s.config.tid_init].storeBuffer
                      && entry.loc.Armada_StoreBufferLocation_Unaddressable?
                      && entry.loc.v.Armada_GlobalStaticVar_barrier?
                      && |entry.loc.fields| == 1
                      && entry.loc.fields[0].Armada_FieldArrayIndex?
                      && entry.loc.fields[0].i == j
                      && entry.value.Armada_PrimitiveValue_uint32?
                      && entry.value.n_uint32 == 0))"
  chl_invariant WaitingForBarrierStoreBufferAlways1AfterAllInitialized @"
    forall tid, entry :: && s.s.ghosts.all_initialized
                    && tid in s.s.threads
                    && entry in s.s.threads[tid].storeBuffer
                    && entry.loc.Armada_StoreBufferLocation_Unaddressable?
                    && entry.loc.v.Armada_GlobalStaticVar_barrier?
                    && |entry.loc.fields| == 1
                    && entry.loc.fields[0].Armada_FieldArrayIndex?
                    && entry.value.Armada_PrimitiveValue_uint32?
                    ==> entry.value.n_uint32 == 1"
  chl_invariant StoreBuffer1ImpliesThreadPastBarrier @"
    forall tid, entry :: && s.s.ghosts.all_initialized
                    && |s.s.ghosts.threads_past_barrier| == 10
                    && tid in s.s.threads
                    && entry in s.s.threads[tid].storeBuffer
                    && entry.loc.Armada_StoreBufferLocation_Unaddressable?
                    && entry.loc.v.Armada_GlobalStaticVar_barrier?
                    && |entry.loc.fields| == 1
                    && entry.loc.fields[0].Armada_FieldArrayIndex?
                    && entry.value.Armada_PrimitiveValue_uint32?
                    && entry.value.n_uint32 == 1
                    ==> var which_thread := entry.loc.fields[0].i;
                        && 0 <= which_thread < 10
                        && s.s.ghosts.threads_past_barrier[which_thread]"
  chl_invariant BarrierAlways0Or1 @"
    forall which_thread :: && s.s.ghosts.all_initialized
                      && |s.s.mem.globals.barrier| == 10
                      && 0 <= which_thread < 10
                      ==> var b := s.s.mem.globals.barrier[which_thread]; b == 0 || b == 1"
  chl_invariant Barrier1ImpliesThreadPastBarrier @"
    forall which_thread :: && s.s.ghosts.all_initialized
                      && |s.s.mem.globals.barrier| == 10
                      && |s.s.ghosts.threads_past_barrier| == 10
                      && 0 <= which_thread < 10
                      && s.s.mem.globals.barrier[which_thread] != 0
                      ==> s.s.ghosts.threads_past_barrier[which_thread]"
}
