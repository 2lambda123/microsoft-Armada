include "../../Armada/ArmadaCommonDefinitions.dfy"

structs SharedStructs2
{
    struct S1 {
       var a:int32;
       var b:int32[10];
    }
}

level B using SharedStructs2
{
    noaddr var v: int32 := 0;
    noaddr var w: int32 := 56;
    var a: int32[10];
    var x: int32;
    var s: S1;
    ghost var g: seq<int32>;

    function TriggerInt(x: int) : int { x }

    method {:extern} ExternalMethod(p: ptr<S1>)
        undefined_unless x > 0
        undefined_unless forall i {:trigger TriggerInt(i)} :: 0 <= TriggerInt(i) < 10 ==> allocated(p+i)
        ensures  $sb_empty  // fence

    method main()
    {
        var y: ptr<int32>;
        var z: int32;
        var sarr: S1[10];
        noaddr var res:set<int32>;

        y := null;
        y := &x;
        y := &s.a;
        if (&s.a == null) {
            y := &s.b[3];
            z := *y;
        }
        fence;
        z := if_undefined(*y, 42);            // If *y isn't defined (e.g., if y is null or freed), then 42
        s ::= if_undefined(sarr[v], sarr[w]); // If sarr[v] isn't defined (e.g., if v is out of the array's bounds), then sarr[w]
        z := if_undefined(0, 42);             // Always 0 since 0 is always defined
        z := global_view(*y);
        g := a[1..4];
        a[a[x]] ::= a[z];

        assert 0 <= z < 10 ==> *(y+z) == *y;
        assert exists i {:trigger TriggerInt(i)} :: 0 <= TriggerInt(i) < 20 && *(y+i) == 0;
        z := if (exists i {:trigger TriggerInt(i)} :: 0 <= TriggerInt(i) < 30 && allocated(&y) && allocated_array(y) && allocated(y+i) && *(y+i) > 0) then 55 else 66;
        res := set i | 0 <= i < 40 && allocated(&y) && allocated_array(y) && allocated(y+i) && *(y+i) > 0 :: *(y+i);
        ExternalMethod(&sarr[0]);
    }
}
