include "../../Armada/ArmadaCommonDefinitions.dfy"

structs test4structs
{
    struct S1 {
        var i:int32
        var j:int32[8]
    }

    struct S2 {
        var a:S1
        var b:S1[4]
    }

    struct S3 {
        var x:S1
        var y:S2[3]
    }

    ghost var log:seq<int> := []

    refinement_constraint @"
       || (ls.stop_reason == hs.stop_reason && ls.ghosts.log == hs.ghosts.log)
       || (ls.stop_reason.Armada_NotStopped? && ls.ghosts.log <= hs.ghosts.log)
    "
}

level test4 using test4structs
{
    noaddr var g:S3
    var g_heap:S3
    var i_heap:int32
    noaddr var my_tid:uint64;

    method {:extern} ExternalPrint(n:int32)
        awaits   g.x.i >= 0
        awaits   i_heap >= 0
        modifies g.x.i
        modifies g.y
        modifies g_heap.x.i
        modifies g_heap.y
        modifies log
        ensures  g.x == old(g.x)
        ensures  g_heap.x != old(g_heap.x)
        ensures  log == old(log) + [n as int]

    invariant Invariant1
    {
        g.x.i >= 0
    }

    method Test(s:seq<int32>, t:seq<int>, u:map<int, seq<int32>>, p:ptr<int32>)
    {
        noaddr var i:int32, j:int;

        i := s[3];
        j := t[2];
        i := u[7][8] / u[7][7];
        assert *p > 7;
        assert *(p+1) > 7;
    }

    method main(a:S1) {
        noaddr var b:S3;
        var p:ptr<int32>;
        var q:ptr<S3>;
        noaddr var n:int32;

        while (*) {
            b ::= g_heap;
        }
        g_heap ::= b;
        b, g.x.i ::= g, *;
        p := &g_heap.x.i;
        if * {
            my_tid := $me;
        }
        p := calloc(int32, *p);
        q ::= malloc(S3);
        dealloc q;
        dealloc p+1;
        my_tid := create_thread ExternalPrint(7 as int32);
        join my_tid;
        assert g.x.i == 3;
        assume g_heap.x.i == 3;
        somehow awaits i_heap == 3 requires g.x.i > 0 modifies g_heap, log ensures i_heap > 0 ensures log == old(log) + [3];
        ExternalPrint(b.x.i);
        Test([], [], map [], p);
    }
}
