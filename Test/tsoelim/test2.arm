include "../../Armada/ArmadaCommonDefinitions.dfy"

structs SharedStructs2 {

  datatype OptionalThread = OptionalThreadSome(tid:uint64) | OptionalThreadNone

  struct S1 {
    var e:uint32[10];
    var f:uint32[10];
  }

  struct S2 {
    var c:S1[20];
    var d:S1[20];
  }

  struct S3 {
    var a:S2[30];
    var b:S2[30];
  }

}

level C using SharedStructs2 {

  ghost var lock_holder:OptionalThread := OptionalThreadNone
  ghost var save_lock_holder:OptionalThread;
  noaddr var x:int32 := 0;
  noaddr var y:int32 := 0;
  noaddr var z:S3[10];

  method Worker()
  {
    label acq:
    assume lock_holder.OptionalThreadNone?;
    somehow modifies lock_holder ensures lock_holder == OptionalThreadSome($me);
    x := x + 1;
    atomic {
      save_lock_holder := lock_holder;
      lock_holder := OptionalThreadNone;
      lock_holder := save_lock_holder;
    }
    y := y + 1;
    label rel:
    assume lock_holder == OptionalThreadSome($me) && $sb_empty;
    somehow modifies lock_holder ensures lock_holder == OptionalThreadNone();
  }

  method main()
  {
    create_thread Worker();
    create_thread Worker();
    z[1].a[2].c[3].e[4] := z[1].a[2].c[3].e[4] + 1;
  }

}

level D using SharedStructs2 {

  ghost var lock_holder:OptionalThread := OptionalThreadNone
  ghost var save_lock_holder:OptionalThread;
  noaddr var x:int32 := 0;
  noaddr var y:int32 := 0;
  noaddr var z:S3[10];

  method Worker()
  {
    assume lock_holder.OptionalThreadNone?;
    somehow modifies lock_holder ensures lock_holder == OptionalThreadSome($me);
    x ::= x + 1;
    atomic {
      save_lock_holder := lock_holder;
      lock_holder := OptionalThreadNone;
      lock_holder := save_lock_holder;
    }
    y := y + 1;
    assume lock_holder == OptionalThreadSome($me) && $sb_empty;
    somehow modifies lock_holder ensures lock_holder == OptionalThreadNone();
  }

  method main()
  {
    create_thread Worker();
    create_thread Worker();
    z[1].a[2].c[3].e[4] := z[1].a[2].c[3].e[4] + 1;
  }

}

proof CD
{
  refinement C D

  inductive_invariant LockHolderInv @"
    forall tid :: 
      ghosts.lock_holder == OptionalThreadSome(tid) <==>
      (&& tid in threads
       && var pc := threads[tid].pc;
       && var ins := PCToInstructionCount_L(pc);
       && PCToMethod_L(pc).LMethodName_Worker?
       && ins > PCToInstructionCount_L(L.Armada_PC_Worker_acq)
       && ins <= PCToInstructionCount_L(L.Armada_PC_Worker_rel))
  "

  tso_elim x "ghosts.lock_holder == OptionalThreadSome(tid)"
}
