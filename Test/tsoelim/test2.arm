include "../../Armada/ArmadaCommonDefinitions.dfy"

structs SharedStructs2 {

  datatype OptionalThread = OptionalThreadSome(tid:uint64) | OptionalThreadNone

  struct S1 {
    var e:uint32[10];
    var f:uint32[10];
  }

  struct S2 {
    var c:S1[20];
    var d:S1[20];
  }

  struct S3 {
    var a:S2[30];
    var b:S2[30];
  }

}

level C using SharedStructs2 {

  ghost var lock_holder:OptionalThread
  noaddr var x:int32 := 0;
  noaddr var y:int32 := 0;
  noaddr var z:S3[10];

  import opened util_option_s

  method Worker()
  {
    somehow awaits lock_holder.OptionalThreadNone?
            modifies lock_holder
            ensures lock_holder == OptionalThreadSome($me);

    label lb1:
    assume lock_holder == OptionalThreadSome($me);
    x := x + 1;

    label lb2:
    assume lock_holder == OptionalThreadSome($me);
    y := y + 1;

    label lb3:
    somehow awaits lock_holder == OptionalThreadSome($me)
            ensures lock_holder == OptionalThreadNone() && $sb_empty;

    assert true;
  }

  method main()
  {
    create_thread Worker();
    create_thread Worker();
    z[1].a[2].c[3].e[4] := z[1].a[2].c[3].e[4] + 1;
  }

}

level D using SharedStructs2 {

  ghost var lock_holder:OptionalThread
  noaddr var x:int32 := 0;
  noaddr var y:int32 := 0;
  noaddr var z:S3[10];

  import opened util_option_s

  method Worker()
  {
    somehow awaits lock_holder.OptionalThreadNone?
            modifies lock_holder
            ensures lock_holder == OptionalThreadSome($me);

    assume lock_holder == OptionalThreadSome($me);
    x ::= x + 1;

    assume lock_holder == OptionalThreadSome($me);
    y := y + 1;

    somehow awaits lock_holder == OptionalThreadSome($me)
            ensures lock_holder == OptionalThreadNone() && $sb_empty;

    assert true;
  }

  method main()
  {
    create_thread Worker();
    create_thread Worker();
    z[1].a[2].c[3].e[4] := z[1].a[2].c[3].e[4] + 1;
  }

}

proof CD
{
  refinement C D

  tso_elim x @"
    && tid in s.s.threads
    && (var pc := s.s.threads[tid].pc;
       || pc.Armada_PC_Worker_lb1?
       || pc.Armada_PC_Worker_lb2?
       || pc.Armada_PC_Worker_lb3?)
    && s.s.ghosts.lock_holder == OptionalThreadSome(tid)
  "
}
