include "../../Armada/ArmadaCommonDefinitions.dfy"

structs SharedStructs3 {

  datatype OptionalThread = OptionalThreadSome(tid:uint64) | OptionalThreadNone

  struct S1 {
    var e:uint32[10];
    var f:uint32[10];
  }

  struct S2 {
    var c:S1[20];
    var d:S1[20];
  }

  struct S3 {
    var a:S2[30];
    var b:S2[30];
  }

}

level E using SharedStructs3 {

  ghost var lock_holder:seq<OptionalThread>
  noaddr var x:int32[10];
  noaddr var y:int32 := 0;
  noaddr var z:S3[10];

  import opened util_option_s

  method Worker(i:int)
  {
    somehow awaits 0 <= i < |lock_holder| && lock_holder[i].OptionalThreadNone?
            modifies lock_holder
            ensures lock_holder == old(lock_holder)[i := OptionalThreadSome($me)];

    label lb1:
    assume 0 <= i < |lock_holder| && lock_holder[i] == OptionalThreadSome($me);
    x[i] := x[i] + 1;

    label lb2:
    assume 0 <= i < |lock_holder| && lock_holder[i] == OptionalThreadSome($me);
    y := y + 1;

    label lb3:
    somehow awaits 0 <= i < |lock_holder| && lock_holder[i] == OptionalThreadSome($me)
            ensures lock_holder == old(lock_holder)[i := OptionalThreadNone] && $sb_empty;

    assert true;
  }

  method main()
  {
    create_thread Worker(1);
    create_thread Worker(2);
    z[1].a[2].c[3].e[4] := z[1].a[2].c[3].e[4] + 1;
  }

}

level F using SharedStructs3 {

  ghost var lock_holder:seq<OptionalThread>
  noaddr var x:int32[10];
  noaddr var y:int32 := 0;
  noaddr var z:S3[10];

  import opened util_option_s

  method Worker(i:int)
  {
    somehow awaits 0 <= i < |lock_holder| && lock_holder[i].OptionalThreadNone?
            modifies lock_holder
            ensures lock_holder == old(lock_holder)[i := OptionalThreadSome($me)];

    assume 0 <= i < |lock_holder| && lock_holder[i] == OptionalThreadSome($me);
    x[i] ::= x[i] + 1;

    assume 0 <= i < |lock_holder| && lock_holder[i] == OptionalThreadSome($me);
    y := y + 1;

    somehow awaits 0 <= i < |lock_holder| && lock_holder[i] == OptionalThreadSome($me)
            ensures lock_holder == old(lock_holder)[i := OptionalThreadNone] && $sb_empty;

    assert true;
  }

  method main()
  {
    create_thread Worker(1);
    create_thread Worker(2);
    z[1].a[2].c[3].e[4] := z[1].a[2].c[3].e[4] + 1;
  }

}

proof EF
{
  refinement E F

  tso_elim x @"
    && tid in s.s.threads
    && (var pc := s.s.threads[tid].pc;
       || pc.Armada_PC_Worker_lb1?
       || pc.Armada_PC_Worker_lb2?
       || pc.Armada_PC_Worker_lb3?)
    && s.s.threads[tid].top.Armada_StackFrame_Worker?
    && idx0 == s.s.threads[tid].top.Worker'i
    && 0 <= idx0 < |s.s.ghosts.lock_holder|
    && s.s.ghosts.lock_holder[idx0] == OptionalThreadSome(tid)
  "
}
