include "../../Armada/ArmadaCommonDefinitions.dfy"

structs SharedStructs {

}

level A using SharedStructs {
    noaddr var x:int32;
    noaddr var y:int32;
    noaddr var z:int32 := 0;

    method main()
    {
        x ::= 3;
label lbl1:
        y ::= 4;
label lbl2:
        z ::= 5;
        atomic {
            z ::= 7;
label lbl3:
            goto lbl3;
        }
    }
}

level B using SharedStructs {
    noaddr var x:int32;
    noaddr var y:int32;
    noaddr var z:int32 := 0;

    method main()
    {
        atomic {
            x ::= 3;
            y ::= 4;
            z ::= 5;
        }
        atomic {
            z ::= 7;
label lbl3:
            goto lbl3;
        }
    }
}

proof AB {
    refinement A B
    reduction phase1 main_1, main_2

    inductive_invariant MyGlobalInvariant @"
      forall tid :: tid in threads ==> threads[tid].storeBuffer == []
    "
}
