include "../../Armada/ArmadaCommonDefinitions.dfy"

structs SharedStructs {

    //type uint64 /*Key*/ = uint64
    //type uint64 /*Value*/ = uint64
    
    struct BSSQueueElement {
        var key:uint64 /*Key*/;
        var value:uint64 /*Value*/;    
    }
    
    struct QbssState {
        var number_elements:uint64;
        var mask:uint64;
        var write_index:uint64;
        var read_index:uint64;
        var element_array:ptr<BSSQueueElement>; // need to make sure the array is 2^N = number_elements
    }

    struct BackoffState {
        var lock:uint64;
        var backoff_iteration_frequency_counters:uint64[2];
        var metric:uint64;
        var total_operations:uint64;
    }

    datatype QbssLogEntry = EnqueueLogEntry(key:uint64, value:uint64) | DequeueLogEntry(key:uint64, value:uint64)   
    ghost var log:seq<QbssLogEntry> := [];

    refinement_constraint @"
       || (ls.stop_reason == hs.stop_reason && ls.ghosts.log == hs.ghosts.log)
       || (ls.stop_reason.Armada_NotStopped? && ls.ghosts.log <= hs.ghosts.log)
    "
}

level {:concrete} QueueBSS using SharedStructs {
    noaddr var queue:QbssState;

    method init_queue(qbss:ptr<QbssState>, size:uint64) {
        (*qbss).number_elements := size;
        (*qbss).read_index := 0;
        (*qbss).write_index := 0;
        (*qbss).element_array := calloc(BSSQueueElement, size);
    }

    method enqueue(qbss:ptr<QbssState>, k:uint64, v:uint64) returns (ret:uint64) {
        noaddr var e:ptr<BSSQueueElement>;
        noaddr var read_index:uint64;
        noaddr var number_elements:uint64;
        noaddr var write_index:uint64;
        noaddr var modulo:uint64;
        noaddr var tmp_write_index:uint64;
        noaddr var element:ptr<BSSQueueElement>;
        noaddr var tmp_array:ptr<BSSQueueElement>;

        write_index := (*qbss).write_index;
        tmp_write_index := write_index + 1;
        number_elements := (*qbss).number_elements;
        modulo := tmp_write_index % number_elements;
        read_index := (*qbss).read_index;
        if(read_index != modulo) {
            write_index := (*qbss).write_index;
            tmp_array := (*qbss).element_array;
            element := (*qbss).element_array + write_index; 
            e := element;
            (*e).key := k;
            (*e).value := v;
            write_index := (*qbss).write_index;
            tmp_write_index := write_index + 1;
            number_elements := (*qbss).number_elements;
            modulo := tmp_write_index % number_elements;
            (*qbss).write_index := modulo;
            return 1;
        }
        return 0;
    }

    method dequeue(qbss:ptr<QbssState>, k:ptr<uint64>, v:ptr<uint64>) returns (ret:uint64) {
        noaddr var e:ptr<BSSQueueElement>;
        noaddr var read_index:uint64;
        noaddr var number_elements:uint64;
        noaddr var write_index:uint64;
        noaddr var modulo:uint64;
        noaddr var tmp_read_index:uint64;
        noaddr var tmp_int:uint64;
        noaddr var tmp_array:ptr<BSSQueueElement>;
        noaddr var element:ptr<BSSQueueElement>;
        read_index := (*qbss).read_index;
        write_index := (*qbss).write_index;
        if(read_index != write_index) {
            read_index := (*qbss).read_index;
            tmp_array := (*qbss).element_array;
            element := tmp_array + read_index; 
            e := element;
            if(k != null) {
                tmp_int := (*e).key;
                *k := tmp_int;
            }
            if(v != null) {
                tmp_int := (*e).value;
                *v := tmp_int;
            }
            read_index := (*qbss).read_index;
            tmp_read_index := read_index + 1;
            number_elements := (*qbss).number_elements;
            modulo := tmp_read_index % number_elements;
            (*qbss).read_index := modulo;
            return 1;
        }
        return 0;
    }

    method main() {
        noaddr var tid1:uint64 :=0;
      noaddr var tid2:uint64 :=0;
        noaddr var k:ptr<uint64> := null;
        noaddr var v:ptr<uint64> := null;
        k := malloc(uint64);
        v := malloc(uint64);
      label mn_number_elements_init:
        queue.number_elements := 4;
      label mn_read_index_init:
        queue.read_index := 0;
      label mn_write_index_init:
        queue.write_index := 0;
        queue.element_array := calloc(BSSQueueElement, queue.number_elements);
        if (queue.element_array != null && k != null && v != null) {
//label BeforeEnqueueCreate:
            //tid1 := create_thread enqueue(*k,*v);
//label BeforeDequeueCreate:
            //tid2 := create_thread dequeue(k,v);
        }
    }
}
