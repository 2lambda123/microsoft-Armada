include "../../Armada/ArmadaCommonDefinitions.dfy"

structs SharedStructs
{
  ghost var log:seq<uint32> := [];

  refinement_constraint @"
     || (ls.stop_reason == hs.stop_reason && ls.ghosts.log == hs.ghosts.log)
     || (ls.stop_reason.Armada_NotStopped? && ls.ghosts.log <= hs.ghosts.log)
  "
}

level A using SharedStructs {

  var mutex:uint64
  noaddr var best_guess:uint32 := 0

  method {:extern} rnd() returns (x:uint32)

  method {:extern} printf(i:uint32)
  {
    log := log + [i];
  }

  method worker(n:uint64)
  {
    noaddr var i:int32 := 0;
    noaddr var g:uint32;
    noaddr var m:uint64;

    while (i < 10000) {
      i := i + 1;
      g := rnd();
      m := g as uint64 * g as uint64;
      if (m > n) {
        continue;
      }
label lb_to_be_weakened:
      if (g <= best_guess) {
        continue;
      }
      assume mutex == 0;
      somehow modifies mutex ensures mutex == $me;
      if (g > best_guess) {
        best_guess := g;
      }
      assume mutex == $me && $sb_empty;
      somehow modifies mutex ensures mutex == 0;
    }
  }

  method main(arg:uint64)
  {
    noaddr var tid1:uint64 := 0;
    noaddr var tid2:uint64 := 0;
    noaddr var tid3:uint64 := 0;

    tid1 := create_thread worker(arg);
    tid2 := create_thread worker(arg);
    tid3 := create_thread worker(arg);

    join tid1;
    join tid2;
    join tid3;

    printf(best_guess);
  }

}

level B using SharedStructs {

  var mutex:uint64
  noaddr var best_guess:uint32 := 0

  method {:extern} rnd() returns (x:uint32)

  method {:extern} printf(i:uint32)
  {
    log := log + [i];
  }

  method worker(n:uint64)
  {
    noaddr var i:int32 := 0;
    noaddr var g:uint32;
    noaddr var m:uint64;

    while (i < 10000) {
      i := i + 1;
      g := rnd();
      m := g as uint64 * g as uint64;
      if (m > n) {
        continue;
      }
      if * {
        continue;
      }
      assume mutex == 0;
      somehow modifies mutex ensures mutex == $me;
      if (g > best_guess) {
        best_guess := g;
      }
      assume mutex == $me && $sb_empty;
      somehow modifies mutex ensures mutex == 0;
    }
  }

  method main(arg:uint64)
  {
    noaddr var tid1:uint64 := 0;
    noaddr var tid2:uint64 := 0;
    noaddr var tid3:uint64 := 0;

    tid1 := create_thread worker(arg);
    tid2 := create_thread worker(arg);
    tid3 := create_thread worker(arg);

    join tid1;
    join tid2;
    join tid3;

    printf(best_guess);
  }

}

level C using SharedStructs {

  var mutex:uint64
  noaddr var best_guess:uint32 := 0

  method {:extern} rnd() returns (x:uint32)

  method {:extern} printf(i:uint32)
  {
    log := log + [i];
  }

  method worker(n:uint64)
  {
    noaddr var i:int32 := 0;
    noaddr var g:uint32;
    noaddr var m:uint64;

    while (i < 10000) {
      i := i + 1;
      g := rnd();
      m := g as uint64 * g as uint64;
      if (m > n) {
        continue;
      }
      if * {
        continue;
      }
      assume mutex == 0;
      somehow modifies mutex ensures mutex == $me;
      if (g > best_guess) {
        assume mutex == $me;
        best_guess := g;
      }
      assume mutex == $me && $sb_empty;
      somehow modifies mutex ensures mutex == 0;
    }
  }

  method main(arg:uint64)
  {
    noaddr var tid1:uint64 := 0;
    noaddr var tid2:uint64 := 0;
    noaddr var tid3:uint64 := 0;

    tid1 := create_thread worker(arg);
    tid2 := create_thread worker(arg);
    tid3 := create_thread worker(arg);

    join tid1;
    join tid2;
    join tid3;

    assume tid1 != 0 && tid2 != 0 && tid3 != 0;
    printf(best_guess);
  }

}

level D using SharedStructs {

  var mutex:uint64
  noaddr var best_guess:uint32 := 0

  method {:extern} rnd() returns (x:uint32)

  method {:extern} printf(i:uint32)
  {
    log := log + [i];
  }

  method worker(n:uint64)
  {
    noaddr var i:int32 := 0;
    noaddr var g:uint32;
    noaddr var m:uint64;

    while (i < 10000) {
      i := i + 1;
      g := rnd();
      m := g as uint64 * g as uint64;
      if (m > n) {
        continue;
      }
      if * {
        continue;
      }
      assume mutex == 0;
      somehow modifies mutex ensures mutex == $me;
      assume mutex == $me;
      if (g > best_guess) {
        assume mutex == $me;
        best_guess ::= g;
      }
      assume mutex == $me && $sb_empty;
      somehow modifies mutex ensures mutex == 0;
    }
  }

  method main(arg:uint64)
  {
    noaddr var tid1:uint64 := 0;
    noaddr var tid2:uint64 := 0;
    noaddr var tid3:uint64 := 0;

    tid1 := create_thread worker(arg);
    tid2 := create_thread worker(arg);
    tid3 := create_thread worker(arg);

    join tid1;
    join tid2;
    join tid3;

    assume tid1 != 0 && tid2 != 0 && tid3 != 0;
    printf(best_guess);
  }

}

proof AB
{
  refinement A B
  starweakening statements worker_lb_to_be_weakened variables best_guess
}

proof BC
{
  refinement B C
  assume_intro
}              

proof CD
{
  refinement C D

  inductive_invariant ZeroNotATid "0 !in threads"

  inductive_invariant OnlyCertainTids @"
    if tid_init !in threads then
      (forall tid :: tid !in threads)
    else
      var t := threads[tid_init];
      && (if |t.stack| == 0 then
            t.top.Armada_StackFrame_main?
          else
            && t.stack[|t.stack|-1].frame.Armada_StackFrame_main?
            && !t.top.Armada_StackFrame_main?
            && (forall i :: 0 <= i < |t.stack|-1 ==> !t.stack[i].frame.Armada_StackFrame_main?)
         )
      && var frame := if |t.stack| == 0 then t.top else t.stack[|t.stack|-1].frame;
      && var pc := if |t.stack| == 0 then t.pc else t.stack[|t.stack|-1].return_pc;
      && var tid1 := frame.main.tid1;
      && var tid2 := frame.main.tid2;
      && var tid3 := frame.main.tid3;
      && (tid_init in threads ==> !threads[tid_init].top.Armada_StackFrame_worker?
                                  && (forall eframe :: eframe in threads[tid_init].stack ==> !eframe.frame.Armada_StackFrame_worker?))
      && (tid1 in threads ==> !threads[tid1].top.Armada_StackFrame_main?
                              && (forall eframe :: eframe in threads[tid1].stack ==> !eframe.frame.Armada_StackFrame_main?))
      && (tid2 in threads ==> !threads[tid2].top.Armada_StackFrame_main?
                              && (forall eframe :: eframe in threads[tid2].stack ==> !eframe.frame.Armada_StackFrame_main?))
      && (tid3 in threads ==> !threads[tid3].top.Armada_StackFrame_main?
                              && (forall eframe :: eframe in threads[tid3].stack ==> !eframe.frame.Armada_StackFrame_main?))
      && (pc.Armada_PC_main_Start? ==> forall tid :: tid in threads ==> tid == tid_init)
      && (pc.Armada_PC_main_1? ==> forall tid :: tid in threads ==> tid == tid_init || tid == tid1)
      && (pc.Armada_PC_main_2? ==> forall tid :: tid in threads ==> tid == tid_init || tid == tid1 || tid == tid2)
      && (pc.Armada_PC_main_3? ==> forall tid :: tid in threads ==> tid == tid_init || tid == tid1 || tid == tid2 || tid == tid3)
      && (pc.Armada_PC_main_4? ==> forall tid :: tid in threads ==> tid == tid_init || tid == tid2 || tid == tid3)
      && (pc.Armada_PC_main_5? ==> forall tid :: tid in threads ==> tid == tid_init || tid == tid3)
      && (pc.Armada_PC_main_6? ==> forall tid :: tid in threads ==> tid == tid_init)
      && (pc.Armada_PC_main_End? ==> forall tid :: tid in threads ==> tid == tid_init)
  " depends_on ZeroNotATid, StackMatchesMethodInv

  tso_elim best_guess @"
    && tid in threads
    && var t := threads[tid];
    && var pc := t.pc;
    && (|| (&& |t.stack| == 0
            && t.top.Armada_StackFrame_main?
            && pc.Armada_PC_6_main?
           )
        || (&& |t.stack| == 0
            && t.top.Armada_StackFrame_worker?
            && (pc.Armada_PC_9_worker? || pc.Armada_PC_10_worker? || pc.Armada_PC_11_worker?)
            && Armada_ValidPointerToPrimitive(s.s.mem.heap, s.s.addrs.mutex, Armada_PrimitiveType_uint64)
            && Armada_DereferencePointerToPrimitive_uint64(s.s.mem.heap, s.s.addrs.mutex) == tid
           )
       )
  "
}
