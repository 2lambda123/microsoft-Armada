include "../../Armada/ArmadaCommonDefinitions.dfy"

structs SharedStructs {

    //type uint32 /*Key*/ = uint32
    //type uint32 /*Value*/ = uint32
    
    struct BSSQueueElement {
        var key:uint32 /*Key*/;
        var value:uint32 /*Value*/;    
    }
    
    struct QbssState {
        var number_elements:uint32;
        var mask:uint32;
        var write_index:uint32;
        var read_index:uint32;
        var element_array:ptr<BSSQueueElement>; // need to make sure the array is 2^N = number_elements
        var array_size:uint32;
    }

    struct BackoffState {
        var lock:uint32;
        var backoff_iteration_frequency_counters:uint32[2];
        var metric:uint32;
        var total_operations:uint32;
    }

    struct BMMQueueElement {
        var key:uint32 /*Key*/;
        var value:uint32 /*Value*/;    
        var sequence_number:uint32;    
    }
    
    struct QbmmState {
        var number_elements:uint32;
        var mask:uint32;
        var write_index:uint32;
        var read_index:uint32;
        var element_array:ptr<BMMQueueElement>; 
        var dequeue_backoff:BackoffState;
        var enqueue_backoff:BackoffState;
    }

    datatype QbssLogEntry = EnqueueLogEntry(key:uint32, value:uint32)    
    ghost var log:seq<QbssLogEntry> := [];

    refinement_constraint @"
       || (ls.stop_reason == hs.stop_reason && ls.ghosts.log == hs.ghosts.log)
       || (ls.stop_reason.Armada_NotStopped? && ls.ghosts.log <= hs.ghosts.log)
    "
}

level EnqueueBMM using SharedStructs {
    noaddr var backoff_initial_value:uint32 := 0;
    noaddr var backoff_limit:uint32 := 10;

    method enqueue(state:ptr<QbmmState>, k:uint32 /*Key*/, v:uint32 /*Value*/) {
        var finished_flag:uint8 := 0;
        var rv:int32 := 1;
        var sequence_number:uint32;
        var write_index:uint32;
        var difference:int32;
        //var constants:Constants;
        var backoff_iteration:uint32 := backoff_initial_value; 
        //var e:ptr<BMMQueueElement> := null;
        var e:BMMQueueElement := null;
        var tmp_mask:uint32;
        var index:uint32;
        var tmp_read_index:uint32;
        var tmp_write_index:uint32;
        write_index := (*state).write_index;
        
        while(finished_flag == 0) {
            tmp_mask := (*state).mask;
            index ::= (write_index as bv32 & tmp_mask as bv32) as uint32;
            e ::= *((*state).element_array + (index as uint32));
            sequence_number := e.sequence_number;
            difference := sequence_number as int32 - write_index as int32;
            
            tmp_read_index := (*state).read_index;    
            if( ((*state).write_index+1) as bv32 & tmp_mask as bv32 != tmp_read_index as bv32) {
                e.key ::= k;
                e.value ::= v;
                
                tmp_write_index ::= (((*state).write_index+1) as bv32 & tmp_mask as bv32) as uint32;        
                (*state).write_index ::= tmp_write_index;
                somehow modifies log ensures log == old(log) + [EnqueueLogEntry(k,v)];
            }
        }
    }

    method main() {

    }
}
    
level EnqueueBSS using SharedStructs {
    method enqueue(state:ptr<QbssState>, k:uint32 /*Key*/, v:uint32 /*Value*/) {
    label lb1:
        var e:ptr<BSSQueueElement>;
    label lb2:
        if( ((*state).write_index+1) % ((*state).array_size) != (*state).read_index) {
    label lb3:
            e ::= (*state).element_array + (*state).write_index;
    label lb4:
            (*e).key ::= k;
    label lb5:
            (*e).value ::= v;
    label lb6:
            (*state).write_index ::= ((*state).write_index+1) % (*state).array_size;
    label lb7:
            somehow modifies log ensures log == old(log) + [EnqueueLogEntry(k,v)];
        }
    }

    method dequeue(state:ptr<QbssState>, k:ptr<uint32>, v:ptr<uint32>) {
        
    }
    
    method main() {
        var t1:uint64;
        var qs:QbssState;
        var k:uint32 := 1;
        var v:uint32 := 42;
        t1 := create_thread enqueue(&qs, k, v);
        t1 := create_thread dequeue(&qs, &k, &v);
    }
}
        
level EnqueueBSS2 using SharedStructs {
    method enqueue(state:ptr<QbssState>, k:uint32 /*Key*/, v:uint32 /*Value*/) {
        var e:ptr<BSSQueueElement>;
        if( ((*state).write_index+1) % ((*state).array_size) != (*state).read_index) {
            e ::= (*state).element_array + (*state).write_index;
            (*e).key ::= k;
            (*e).value ::= v;
            (*state).write_index ::= ((*state).write_index+1) % (*state).array_size;
            somehow modifies log ensures log == old(log) + [EnqueueLogEntry(k,v)];
        }
    }
    method main() {

    }
}
        
level EnqueueBSSAtomic using SharedStructs { 
    method enqueue(state:ptr<QbssState>, k:uint32 /*Key*/, v:uint32 /*Value*/) {
        var e:ptr<BSSQueueElement>;
        atomic {
            if( ((*state).write_index+1) % ((*state).array_size) != (*state).read_index) {
                e ::= (*state).element_array + (*state).write_index;
                (*e).key ::= k;
                (*e).value ::= v;
                (*state).write_index ::= ((*state).write_index+1) % (*state).array_size;
                somehow modifies log ensures log == old(log) + [EnqueueLogEntry(k,v)];
            }
        }
    }

    method main() {
    }
}

proof BSS_Refines_BSS2 {
    refinement EnqueueBSS EnqueueBSS2
    assume_intro
}

proof BSS_Refines_BSSAtomic {
    refinement EnqueueBSS EnqueueBSSAtomic
    reduction phase1 enqueue_lb3, enqueue_lb4, enqueue_lb5, enqueue_lb6, enqueue_lb7
    inductive_invariant MyGlobalInvariant @"
      && (forall tid :: tid in s.s.threads ==> tid == s.config.tid_init)
      && (forall tid :: tid in s.s.threads ==> s.s.threads[tid].storeBuffer == [])
    "
}        
